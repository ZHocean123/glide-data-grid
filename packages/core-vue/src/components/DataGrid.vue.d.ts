import type { GridSelection, InnerGridCell, InnerGridColumn, GridMouseEventArgs, GridKeyEventArgs, GridDragEventArgs, DrawHeaderCallback, DrawCellCallback, GroupDetailsCallback, GetRowThemeCallback, Highlight, FillHandle, FullTheme, ImageWindowLoader, CellRenderer } from "../types";
interface Props {
    width: number;
    height: number;
    cellXOffset: number;
    cellYOffset: number;
    translateX?: number;
    translateY?: number;
    accessibilityHeight: number;
    freezeColumns: number;
    freezeTrailingRows: number;
    hasAppendRow: boolean;
    firstColAccessible: boolean;
    fixedShadowX?: boolean;
    fixedShadowY?: boolean;
    allowResize?: boolean;
    isResizing: boolean;
    resizeColumn?: number;
    isDragging: boolean;
    isFilling: boolean;
    horizontalBorder?: boolean;
    rowMarkers?: boolean;
    gridSelection?: GridSelection;
    isFocused: boolean;
    onGridSelectionChange?: (selection: GridSelection) => void;
    onCellActivated?: (event: {
        location: [number, number];
    }) => void;
    onMouseUp?: (args: GridMouseEventArgs) => void;
    onMouseLeave?: (args: GridMouseEventArgs) => void;
    onClick?: (args: GridMouseEventArgs) => void;
    onDoubleClick?: (args: GridMouseEventArgs) => void;
    onContextMenu?: (args: GridMouseEventArgs) => void;
    onPointerDown?: (args: GridMouseEventArgs) => void;
    onPointerMove?: (args: GridMouseEventArgs) => void;
    onPointerUp?: (args: GridMouseEventArgs) => void;
    onPointerLeave?: (args: GridMouseEventArgs) => void;
    onDragOver?: (args: GridDragEventArgs) => void;
    onDrop?: (args: GridDragEventArgs) => void;
    columns: readonly InnerGridColumn[];
    rows: number;
    headerHeight: number;
    groupHeaderHeight: number;
    enableGroups: boolean;
    rowHeight: number | ((index: number) => number);
    canvasRef?: any;
    eventTargetRef?: any;
    getCellContent: (cell: [number, number], forceStrict?: boolean) => InnerGridCell;
    getGroupDetails?: GroupDetailsCallback;
    getRowThemeOverride?: GetRowThemeCallback;
    onHeaderMenuClick?: (col: number, screenPosition: any) => void;
    onHeaderIndicatorClick?: (col: number, screenPosition: any) => void;
    selection: GridSelection;
    prelightCells?: readonly [number, number][];
    highlightRegions?: readonly Highlight[];
    fillHandle?: FillHandle;
    disabledRows?: any;
    imageWindowLoader: ImageWindowLoader;
    onItemHovered?: (args: GridMouseEventArgs) => void;
    onMouseMove?: (args: GridMouseEventArgs) => void;
    onMouseDown?: (args: GridMouseEventArgs) => void;
    onCanvasFocused?: () => void;
    onCanvasBlur?: () => void;
    onCellFocused?: (args: [number, number]) => void;
    onMouseMoveRaw?: (event: MouseEvent) => void;
    onKeyDown?: (event: GridKeyEventArgs) => void;
    onKeyUp?: (event: GridKeyEventArgs) => void;
    verticalBorder: (col: number) => boolean;
    isDraggable?: boolean | "cell" | "header";
    onDragStart?: (args: GridDragEventArgs) => void;
    onDragEnd?: () => void;
    onDragOverCell?: (cell: [number, number], dataTransfer: DataTransfer | null) => void;
    onDragLeave?: () => void;
    drawHeader?: DrawHeaderCallback;
    drawCell?: DrawCellCallback;
    drawFocusRing: boolean;
    dragAndDropState?: {
        src: number;
        dest: number;
    };
    experimental?: {
        disableAccessibilityTree?: boolean;
        disableMinimumCellWidth?: boolean;
        paddingRight?: number;
        paddingBottom?: number;
        enableFirefoxRescaling?: boolean;
        enableSafariRescaling?: boolean;
        kineticScrollPerfHack?: boolean;
        isSubGrid?: boolean;
        strict?: boolean;
        scrollbarWidthOverride?: number;
        hyperWrapping?: boolean;
        renderStrategy?: "single-buffer" | "double-buffer" | "direct";
        eventTarget?: HTMLElement | Window | Document;
    };
    headerIcons?: any;
    smoothScrollX?: boolean;
    smoothScrollY?: boolean;
    theme: FullTheme;
    getCellRenderer: (cell: InnerGridCell) => CellRenderer | undefined;
    resizeIndicator?: "full" | "header" | "none";
}
declare const _default: import("vue").DefineComponent<Props, {
    focus: () => void;
    getBounds: () => undefined;
    damage: () => void;
    getMouseArgsForPosition: () => undefined;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: any;
} & {
    [x: string]: any;
}, string, import("vue").PublicProps, Readonly<Props> & Readonly<{
    [x: `on${Capitalize<any>}`]: ((...args: any) => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
export default _default;
